// Creature class
// Create a "bloop" creature
// NOTE: a creature is an environment

const tag = "[Bloop]"

class Bloop {
  constructor(dna_, health) {
    this.features = {
      name : null,
      health : health,
      dna : dna_,
      attractions : [Math.random()],
      phenotype : { r: 0, g: 0, b: 0 }
    }

    this.features.phenotype.b = Math.round(this.features.attractions[0] * 100)

    this.agent = ""
    // spaces
    // generated by the attached modules
    this.action_space = []

    // modules
    this.slots = 4
    this.modules = [] // see modulate() in ./src/world/world.js for initial modules

    // state
    this.observations = []
    this.actions = []
    this.action = { choice: 0, params: [], last_action: Date.now()}
    this.state = {} // see manifest() in ./src/world/world.js for initial state
  }

  spin(observations, cost) {
    this.observations = observations
    let module = this.modules[this.action.choice]
    let result = module.spin(this)
    // update state : add key/value of result to state object
    let newstate = Object.keys(result)
    // if (result !== this.state.position) console.log('Moving: from', this.state.position, ' to', result)
    // else console.log('Same ', result)
    if (newstate.length > 0) newstate.forEach(key => this.state[key] = result[key])
    log(`${tag} ${this.features.name} - action: [${module.constructor.name}, ${JSON.stringify(this.action)}], cost:${cost}, health:${this.health}`, {show: false})
    if(this.actions.length === 0) log(`${tag} ${this.features.name} - ${this.agent}`)
  }

  reset() {
    // this.action = {choice: 0, params: []} // retain last action in order to determine if agent is still sending new actions
    this.action_space = this.modules.map((module, slot) => [slot, module.params])
    this.observations = []
  }

}

module.exports = { Bloop }